Things to do
 	
 	find way to tag quads with position or other attributes in surface
 	
 	consider using block color handler to reduce # of baked quads in memory (get color from block during chunk build)
 	clean up / reorg model state docs
 	remove dynamic index from paint layer
 	make all model state methods final
 	re-optimize terrain model caching - still worth? Maybe pre-populate most common and leave it at that?
 	cleam up terrain state, use bit packer instead of current mess
 	
 Improve lava textures
 Lava Sounds
 Volcano Sounds
 Measure / throttle volcano node tick time consumption
 Improve push blocks - including: fill in caverns below surface before mounding
 Implement find weakness
 Implement explode
 Detection Item
 Smoke
 Haze
 Biome
 Make TOP debug info for lava blocks configurable
 Clean up Polygon stuff from before
 Code review / clean up of all volcano code - lots of leftovers
 Final perf optimization pass
 
 Post-release features
 Add repair command to capture strays within a radius and for all loaded chunks - call after deserialize
 Ash (requires multi-part)
 Support multiple worlds for lava/volcanos
 Consider different version / child class in terrain state to reduce memory usage when vertex calcs not needed
 Cave-ins?


split quad 250-350 with outliers 220 - 450

[08:11:59] [Chunk Batcher 2/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 135762 ns, total duration = 1357, total runs = 10000
[08:12:01] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitQuad duration = 231 ns, total duration = 231, total runs = 1000000
[08:12:01] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 945 ns, total duration = 114, total runs = 120973
[08:12:03] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 185 ns, total duration = 185, total runs = 1000000
[08:12:03] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 535 ns, total duration = 66, total runs = 123983
[08:12:06] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 194 ns, total duration = 194, total runs = 1000000
[08:12:06] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 558 ns, total duration = 71, total runs = 127083
[08:12:07] [Chunk Batcher 6/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 127458 ns, total duration = 1274, total runs = 10000
[08:12:09] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 270 ns, total duration = 270, total runs = 1000000
[08:12:09] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1116 ns, total duration = 140, total runs = 126199
[08:12:10] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 342 ns, total duration = 342, total runs = 1000000
[08:12:10] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 914 ns, total duration = 112, total runs = 123007
[08:12:11] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 270 ns, total duration = 270, total runs = 1000000
[08:12:11] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 804 ns, total duration = 95, total runs = 118333
[08:12:11] [Chunk Batcher 7/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 227756 ns, total duration = 2277, total runs = 10000
[08:12:12] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 287 ns, total duration = 287, total runs = 1000000
[08:12:12] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 868 ns, total duration = 104, total runs = 119953
[08:12:13] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitQuad duration = 281 ns, total duration = 281, total runs = 1000000
[08:12:13] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 910 ns, total duration = 108, total runs = 118916

[08:16:48] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitQuad duration = 406 ns, total duration = 406, total runs = 1000000
[08:16:48] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1621 ns, total duration = 191, total runs = 118040
[08:16:49] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitQuad duration = 390 ns, total duration = 390, total runs = 1000000
[08:16:49] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1083 ns, total duration = 106, total runs = 97916
[08:16:49] [Chunk Batcher 2/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 237012 ns, total duration = 2370, total runs = 10000
[08:16:51] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 374 ns, total duration = 374, total runs = 1000000
[08:16:51] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1514 ns, total duration = 175, total runs = 115689
[08:16:52] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 335 ns, total duration = 335, total runs = 1000000
[08:16:52] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1113 ns, total duration = 125, total runs = 112755
[08:16:53] [Chunk Batcher 2/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 242847 ns, total duration = 2428, total runs = 10000
[08:16:54] [main/INFO] [exotic_matter]: Avg splitQuad duration = 547 ns, total duration = 547, total runs = 1000000
[08:16:54] [main/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 2193 ns, total duration = 233, total runs = 106439
[08:16:55] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 301 ns, total duration = 301, total runs = 1000000
[08:16:55] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 932 ns, total duration = 105, total runs = 113502
[08:16:57] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 388 ns, total duration = 388, total runs = 1000000
[08:16:57] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 952 ns, total duration = 108, total runs = 114250
[08:16:57] [Chunk Batcher 5/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 227557 ns, total duration = 2275, total runs = 10000
[08:16:59] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitQuad duration = 352 ns, total duration = 352, total runs = 1000000
[08:16:59] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1597 ns, total duration = 179, total runs = 112283
[08:17:02] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 433 ns, total duration = 433, total runs = 1000000
[08:17:02] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 839 ns, total duration = 93, total runs = 110901
[08:17:07] [main/INFO] [exotic_matter]: Avg splitQuad duration = 190 ns, total duration = 190, total runs = 1000000
[08:17:07] [main/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 560 ns, total duration = 68, total runs = 122894
[08:17:07] [main/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 190052 ns, total duration = 1900, total runs = 10000

// with concrete vertex type
[18:05:57] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitQuad duration = 286 ns, total duration = 286, total runs = 1000000
[18:05:57] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1137 ns, total duration = 111, total runs = 97972
[18:06:03] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitQuad duration = 327 ns, total duration = 327, total runs = 1000000
[18:06:03] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1451 ns, total duration = 148, total runs = 101961
[18:06:03] [Chunk Batcher 3/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 186354 ns, total duration = 1863, total runs = 10000


// make CSG poly flip non-mutating
[09:34:47] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitQuad duration = 470 ns, total duration = 470, total runs = 1000000
[09:34:47] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1125 ns, total duration = 143, total runs = 127747
[09:34:48] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 416 ns, total duration = 416, total runs = 1000000
[09:34:48] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1280 ns, total duration = 164, total runs = 128278
[09:34:49] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitQuad duration = 331 ns, total duration = 331, total runs = 1000000
[09:34:49] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1040 ns, total duration = 127, total runs = 122709
[09:34:49] [Chunk Batcher 0/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 278266 ns, total duration = 2782, total runs = 10000
[09:34:50] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 367 ns, total duration = 367, total runs = 1000000
[09:34:50] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1246 ns, total duration = 151, total runs = 121417
[09:34:51] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 393 ns, total duration = 393, total runs = 1000000
[09:34:51] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1366 ns, total duration = 173, total runs = 126881
[09:34:52] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 358 ns, total duration = 358, total runs = 1000000
[09:34:52] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1033 ns, total duration = 127, total runs = 123195
[09:34:52] [Chunk Batcher 7/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 277177 ns, total duration = 2771, total runs = 10000
[09:34:53] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 391 ns, total duration = 391, total runs = 1000000
[09:34:53] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1159 ns, total duration = 146, total runs = 126139
[09:34:54] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 418 ns, total duration = 418, total runs = 1000000
[09:34:54] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1010 ns, total duration = 124, total runs = 123256


// add acceptor interface
[10:00:10] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitQuad duration = 354 ns, total duration = 354, total runs = 1000000
[10:00:10] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1240 ns, total duration = 151, total runs = 122408
[10:00:10] [Chunk Batcher 0/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 277579 ns, total duration = 2775, total runs = 10000
[10:00:11] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 314 ns, total duration = 314, total runs = 1000000
[10:00:11] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 954 ns, total duration = 117, total runs = 123391
[10:00:12] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 329 ns, total duration = 329, total runs = 1000000
[10:00:12] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 905 ns, total duration = 112, total runs = 124441
[10:00:12] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitQuad duration = 336 ns, total duration = 336, total runs = 1000000
[10:00:12] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 919 ns, total duration = 111, total runs = 121282
[10:00:12] [Chunk Batcher 3/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 264754 ns, total duration = 2647, total runs = 10000
[10:00:13] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitQuad duration = 366 ns, total duration = 366, total runs = 1000000
[10:00:13] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1035 ns, total duration = 130, total runs = 125734
[10:00:14] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 365 ns, total duration = 365, total runs = 1000000
[10:00:14] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1202 ns, total duration = 152, total runs = 126386
[10:00:15] [Chunk Batcher 0/INFO] [exotic_matter]: Avg splitQuad duration = 404 ns, total duration = 404, total runs = 1000000
[10:00:15] [Chunk Batcher 0/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1147 ns, total duration = 145, total runs = 126945
[10:00:15] [Chunk Batcher 4/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 315590 ns, total duration = 3155, total runs = 10000
[10:00:16] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitQuad duration = 389 ns, total duration = 389, total runs = 1000000
[10:00:16] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1132 ns, total duration = 144, total runs = 127169
[10:00:16] [Chunk Batcher 4/INFO] [exotic_matter]: Avg splitQuad duration = 389 ns, total duration = 389, total runs = 1000000
[10:00:16] [Chunk Batcher 4/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1124 ns, total duration = 143, total runs = 127265


// map flip semantic vs copy vertices/polygon to new instance
[11:16:03] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitQuad duration = 344 ns, total duration = 344, total runs = 1000000
[11:16:03] [Chunk Batcher 1/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 947 ns, total duration = 124, total runs = 131495
[11:16:05] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 388 ns, total duration = 388, total runs = 1000000
[11:16:05] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1223 ns, total duration = 156, total runs = 127609
[11:16:06] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitQuad duration = 303 ns, total duration = 303, total runs = 1000000
[11:16:06] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 848 ns, total duration = 109, total runs = 128887
[11:16:07] [Chunk Batcher 4/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 259189 ns, total duration = 2591, total runs = 10000
[11:16:07] [Chunk Batcher 7/INFO] [exotic_matter]: Avg recombinePolys duration = 2068 ns, total duration = 206, total runs = 100000
[11:16:07] [Chunk Batcher 7/INFO] [exotic_matter]: CSG Poly recombination efficiency = 27 percent
[11:16:08] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 278 ns, total duration = 278, total runs = 1000000
[11:16:08] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 854 ns, total duration = 109, total runs = 127705



// direct array access as parameter
[08:22:55] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 956 ns, total duration = 115, total runs = 120523
[08:22:56] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 339 ns, total duration = 339, total runs = 1000000
[08:22:56] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1148 ns, total duration = 139, total runs = 121281
[08:22:57] [Chunk Batcher 7/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 245048 ns, total duration = 2450, total runs = 10000
[08:22:57] [Chunk Batcher 1/INFO] [exotic_matter]: Avg recombinePolys duration = 1827 ns, total duration = 182, total runs = 100000
[08:22:57] [Chunk Batcher 1/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent
[08:22:57] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 338 ns, total duration = 338, total runs = 1000000
[08:22:57] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 864 ns, total duration = 105, total runs = 121654
[08:22:58] [Chunk Batcher 4/INFO] [exotic_matter]: Avg splitQuad duration = 313 ns, total duration = 313, total runs = 1000000
[08:22:58] [Chunk Batcher 4/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1060 ns, total duration = 124, total runs = 117826
[08:23:00] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 392 ns, total duration = 392, total runs = 1000000
[08:23:00] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1494 ns, total duration = 184, total runs = 123238
[08:23:00] [Chunk Batcher 3/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 254654 ns, total duration = 2546, total runs = 10000
[08:23:00] [Chunk Batcher 4/INFO] [exotic_matter]: Avg recombinePolys duration = 1950 ns, total duration = 195, total runs = 100000
[08:23:00] [Chunk Batcher 4/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent
[08:23:01] [Chunk Batcher 4/INFO] [exotic_matter]: Avg splitQuad duration = 286 ns, total duration = 286, total runs = 1000000
[08:23:01] [Chunk Batcher 4/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 882 ns, total duration = 105, total runs = 119313
[08:23:02] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitQuad duration = 286 ns, total duration = 286, total runs = 1000000
[08:23:02] [Chunk Batcher 2/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 875 ns, total duration = 105, total runs = 120158


//  use counters instead of array
[14:33:40] [Chunk Batcher 1/INFO] [exotic_matter]: Avg recombinePolys duration = 2323 ns, total duration = 232, total runs = 100000
[14:33:40] [Chunk Batcher 1/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent
[14:33:40] [Chunk Batcher 1/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 255268 ns, total duration = 2552, total runs = 10000
[14:33:40] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 271 ns, total duration = 271, total runs = 1000000
[14:33:40] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 967 ns, total duration = 116, total runs = 120581
[14:33:41] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 291 ns, total duration = 291, total runs = 1000000
[14:33:41] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1016 ns, total duration = 122, total runs = 120226
[14:33:42] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitQuad duration = 293 ns, total duration = 293, total runs = 1000000
[14:33:42] [Chunk Batcher 3/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 992 ns, total duration = 122, total runs = 123181
[14:33:43] [Chunk Batcher 5/INFO] [exotic_matter]: Avg recombinePolys duration = 2143 ns, total duration = 214, total runs = 100000
[14:33:43] [Chunk Batcher 5/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent
[14:33:43] [Chunk Batcher 5/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 268502 ns, total duration = 2685, total runs = 10000
[14:33:43] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitQuad duration = 293 ns, total duration = 293, total runs = 1000000
[14:33:43] [Chunk Batcher 6/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1027 ns, total duration = 125, total runs = 121641
[14:33:44] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitQuad duration = 319 ns, total duration = 319, total runs = 1000000
[14:33:44] [Chunk Batcher 7/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 1059 ns, total duration = 128, total runs = 120865
[14:33:45] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitQuad duration = 335 ns, total duration = 335, total runs = 1000000
[14:33:45] [Chunk Batcher 5/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 949 ns, total duration = 114, total runs = 120657
[14:33:46] [Chunk Batcher 3/INFO] [exotic_matter]: Avg recombinePolys duration = 2092 ns, total duration = 209, total runs = 100000
[14:33:46] [Chunk Batcher 3/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent


[08:47:59] [Chunk Batcher 3/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 178953 ns, total duration = 1789, total runs = 10000
[08:48:01] [main/INFO] [exotic_matter]: Avg recombinePolys duration = 1282 ns, total duration = 128, total runs = 100000
[08:48:01] [main/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent
[08:48:04] [Chunk Batcher 2/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 177609 ns, total duration = 1776, total runs = 10000
[08:48:04] [main/INFO] [exotic_matter]: Avg splitQuad duration = 187 ns, total duration = 1872, total runs = 10000000
[08:48:04] [main/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 429 ns, total duration = 529, total runs = 1233100
[08:48:06] [Chunk Batcher 2/INFO] [exotic_matter]: Avg recombinePolys duration = 1292 ns, total duration = 129, total runs = 100000
[08:48:06] [Chunk Batcher 2/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent

// CSGPolygon
[07:34:52] [Server thread/INFO] [big_volcano]: WorldBuffer state sets this sample = 102328
[07:34:53] [Chunk Batcher 4/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 180355 ns, total duration = 1803, total runs = 10000
[07:34:55] [Chunk Batcher 0/INFO] [exotic_matter]: Avg recombinePolys duration = 1400 ns, total duration = 140, total runs = 100000
[07:34:55] [Chunk Batcher 0/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent
[07:35:02] [Chunk Batcher 6/INFO] [exotic_matter]: Avg terrainGetShapeQuads duration = 132563 ns, total duration = 1325, total runs = 10000
[07:35:02] [Chunk Batcher 1/INFO] [exotic_matter]: Avg recombinePolys duration = 1806 ns, total duration = 180, total runs = 100000
[07:35:02] [Chunk Batcher 1/INFO] [exotic_matter]: CSG Poly recombination efficiency = 26 percent
[07:35:07] [main/INFO] [exotic_matter]: Avg splitQuad duration = 185 ns, total duration = 1853, total runs = 10000000
[07:35:07] [main/INFO] [exotic_matter]: Avg splitSpanningQuad duration = 416 ns, total duration = 509, total runs = 1222072

// with perf test harness
[12:27:33] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 89745 ns, total duration = 8974, total runs = 100000
[12:27:35] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 992 ns, total duration = 992, total runs = 1000000
[12:27:35] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 33 percent
[12:27:35] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 109 ns, total duration = 1095, total runs = 10000000
[12:27:35] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 236 ns, total duration = 311, total runs = 1315076
[12:27:38] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 107 ns, total duration = 1077, total runs = 10000000
[12:27:38] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 232 ns, total duration = 306, total runs = 1318768
[12:27:41] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 108 ns, total duration = 1086, total runs = 10000000
[12:27:41] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 233 ns, total duration = 307, total runs = 1317934
[12:27:42] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 89145 ns, total duration = 8914, total runs = 100000

// use array lenght instead of instance var for vertex count
[12:33:48] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 90372 ns, total duration = 9037, total runs = 100000
[12:33:49] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 1006 ns, total duration = 1006, total runs = 1000000
[12:33:49] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 33 percent
[12:33:50] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 112 ns, total duration = 1122, total runs = 10000000
[12:33:50] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 233 ns, total duration = 306, total runs = 1315076
[12:33:53] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 110 ns, total duration = 1103, total runs = 10000000
[12:33:53] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 229 ns, total duration = 302, total runs = 1318768
[12:33:56] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 111 ns, total duration = 1116, total runs = 10000000
[12:33:56] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 230 ns, total duration = 304, total runs = 1317934
[12:33:57] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 89855 ns, total duration = 8985, total runs = 100000

[12:46:36] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 91356 ns, total duration = 9135, total runs = 100000
[12:46:37] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 990 ns, total duration = 990, total runs = 1000000
[12:46:37] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 33 percent
[12:46:38] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 116 ns, total duration = 1169, total runs = 10000000
[12:46:38] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 231 ns, total duration = 304, total runs = 1315076
[12:46:41] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 117 ns, total duration = 1172, total runs = 10000000
[12:46:41] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 232 ns, total duration = 305, total runs = 1318768
[12:46:44] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 116 ns, total duration = 1165, total runs = 10000000
[12:46:44] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 230 ns, total duration = 303, total runs = 1317934
[12:46:45] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 90434 ns, total duration = 9043, total runs = 100000


base ancestor tracking on original poly instance
[13:02:09] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 89931 ns, total duration = 8993, total runs = 100000
[13:02:10] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 840 ns, total duration = 840, total runs = 1000000
[13:02:10] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 33 percent
[13:02:12] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 116 ns, total duration = 1162, total runs = 10000000
[13:02:12] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 228 ns, total duration = 300, total runs = 1315076
[13:02:15] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 118 ns, total duration = 1186, total runs = 10000000
[13:02:15] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 234 ns, total duration = 308, total runs = 1318768
[13:02:18] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 117 ns, total duration = 1171, total runs = 10000000
[13:02:18] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 230 ns, total duration = 304, total runs = 1317934
[13:02:19] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 92149 ns, total duration = 9214, total runs = 100000

[13:03:07] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 90389 ns, total duration = 9038, total runs = 100000
[13:03:07] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 863 ns, total duration = 863, total runs = 1000000
[13:03:07] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 33 percent
[13:03:09] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 114 ns, total duration = 1145, total runs = 10000000
[13:03:09] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 226 ns, total duration = 297, total runs = 1315076
[13:03:12] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 115 ns, total duration = 1159, total runs = 10000000
[13:03:12] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 230 ns, total duration = 304, total runs = 1318768
[13:03:15] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 115 ns, total duration = 1150, total runs = 10000000
[13:03:15] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 228 ns, total duration = 300, total runs = 1317934
[13:03:16] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 89835 ns, total duration = 8983, total runs = 100000

no lines, dummy recombine
[20:36:34] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 95995 ns, total duration = 9599, total runs = 100000
[20:36:34] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 1443 ns, total duration = 1443, total runs = 1000000
[20:36:34] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 0 percent
[20:36:36] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 113 ns, total duration = 1133, total runs = 10000000
[20:36:36] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 200 ns, total duration = 263, total runs = 1315076
[20:36:39] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 113 ns, total duration = 1139, total runs = 10000000
[20:36:39] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 200 ns, total duration = 264, total runs = 1318768
[20:36:42] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 113 ns, total duration = 1132, total runs = 10000000
[20:36:42] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 201 ns, total duration = 265, total runs = 1317934
[20:36:44] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 95496 ns, total duration = 9549, total runs = 100000

compute masked color 1x in interpolation
[20:44:44] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 95352 ns, total duration = 9535, total runs = 100000
[20:44:45] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 1457 ns, total duration = 1457, total runs = 1000000
[20:44:45] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 0 percent
[20:44:47] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 112 ns, total duration = 1128, total runs = 10000000
[20:44:47] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 198 ns, total duration = 260, total runs = 1315076
[20:44:50] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 111 ns, total duration = 1114, total runs = 10000000
[20:44:50] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 196 ns, total duration = 259, total runs = 1318768
[20:44:53] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 113 ns, total duration = 1133, total runs = 10000000
[20:44:53] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 199 ns, total duration = 263, total runs = 1317934
[20:44:54] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 95178 ns, total duration = 9517, total runs = 100000

with new split acceptor
[08:40:12] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 49581 ns, total duration = 4958, total runs = 100000
[08:40:17] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 49658 ns, total duration = 4965, total runs = 100000
[08:40:23] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg terrainGetShapeQuads duration = 52321 ns, total duration = 5232, total runs = 100000


// without eliminating cubes
getShapeQuads mean time = 49272ns
getShapeQuads min time  = 16775ns
getShapeQuads max time  = 2052566ns
Error count = 0
 
getShapeQuads mean time = 49606ns
getShapeQuads min time  = 17522ns
getShapeQuads max time  = 1701923ns
Error count = 0
 
getShapeQuads mean time = 49596ns
getShapeQuads min time  = 16709ns
getShapeQuads max time  = 1672512ns
Error count = 0
 
getShapeQuads mean time = 49677ns
getShapeQuads min time  = 17296ns
getShapeQuads max time  = 1916586ns
Error count = 0

// eliminating cubes
getShapeQuads mean time = 45782ns
getShapeQuads min time  = 1018ns
getShapeQuads max time  = 1555113ns
Error count = 0
 
getShapeQuads mean time = 45754ns
getShapeQuads min time  = 986ns
getShapeQuads max time  = 1554552ns
Error count = 0
 
getShapeQuads mean time = 45564ns
getShapeQuads min time  = 961ns
getShapeQuads max time  = 1757308ns
Error count = 0

//enable simplified geometry
getShapeQuads mean time = 28124ns
getShapeQuads min time  = 951ns
getShapeQuads max time  = 1842691ns
Error count = 167
 
getShapeQuads mean time = 28462ns
getShapeQuads min time  = 960ns
getShapeQuads max time  = 1551602ns
Error count = 167
 
getShapeQuads mean time = 28441ns
getShapeQuads min time  = 949ns
getShapeQuads max time  = 1718229ns
Error count = 167

// fix CSG errors
getShapeQuads mean time = 28317ns
getShapeQuads min time  = 940ns
getShapeQuads max time  = 1554628ns
Error count = 0
 
getShapeQuads mean time = 28482ns
getShapeQuads min time  = 929ns
getShapeQuads max time  = 1620854ns
Error count = 0
 
getShapeQuads mean time = 28588ns
getShapeQuads min time  = 945ns
getShapeQuads max time  = 1340693ns
Error count = 0

// recombined before changes
getShapeQuads mean time = 25615ns
getShapeQuads min time  = 919ns
getShapeQuads max time  = 1773511ns
[14:07:42] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9366 ns, total duration = 946, total runs = 101026
Error count = 0
 
getShapeQuads mean time = 25369ns
getShapeQuads min time  = 914ns
getShapeQuads max time  = 1899659ns
[14:07:45] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9288 ns, total duration = 938, total runs = 101026
Error count = 0
 
getShapeQuads mean time = 25555ns
getShapeQuads min time  = 912ns
getShapeQuads max time  = 1426350ns
[14:07:48] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9350 ns, total duration = 944, total runs = 101026
Error count = 0


//recombined - track and skip ancestors - not much help, backed out change
getShapeQuads mean time = 26012ns
getShapeQuads min time  = 830ns
getShapeQuads max time  = 1295775ns
[14:06:10] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9251 ns, total duration = 934, total runs = 101026
Error count = 0
 
getShapeQuads mean time = 25724ns
getShapeQuads min time  = 828ns
getShapeQuads max time  = 1372863ns
[14:06:13] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9147 ns, total duration = 924, total runs = 101026
Error count = 0
 
getShapeQuads mean time = 25977ns
getShapeQuads min time  = 830ns
getShapeQuads max time  = 1417909ns
[14:06:16] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9235 ns, total duration = 932, total runs = 101026
Error count = 0

// use simpler data structures in recombine
getShapeQuads mean time = 21981ns
getShapeQuads min time  = 902ns
getShapeQuads max time  = 1902886ns
[14:42:29] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 5597 ns, total duration = 565, total runs = 101026
Error count = 0
 
getShapeQuads mean time = 22391ns
getShapeQuads min time  = 903ns
getShapeQuads max time  = 1306367ns
[14:42:31] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 5709 ns, total duration = 576, total runs = 101026
Error count = 0
 
getShapeQuads mean time = 23467ns
getShapeQuads min time  = 909ns
getShapeQuads max time  = 1381383ns
[14:42:34] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 5995 ns, total duration = 605, total runs = 101026
Error count = 0

// fix bug in terrain simplification
getShapeQuads mean time = 32661ns
getShapeQuads min time  = 832ns
getShapeQuads max time  = 2227536ns
[15:19:53] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9876 ns, total duration = 999, total runs = 101159
Error count = 0
 
getShapeQuads mean time = 32766ns
getShapeQuads min time  = 837ns
getShapeQuads max time  = 1273780ns
[15:19:57] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9926 ns, total duration = 1004, total runs = 101159
Error count = 0
 
getShapeQuads mean time = 33601ns
getShapeQuads min time  = 838ns
getShapeQuads max time  = 1634787ns
[15:20:01] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 10148 ns, total duration = 1026, total runs = 101159
Error count = 0

// single pre-split plane
getShapeQuads mean time = 33125ns
getShapeQuads min time  = 976ns
getShapeQuads max time  = 1650254ns
[16:43:00] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 8895 ns, total duration = 899, total runs = 101159
Error count = 0
 
getShapeQuads mean time = 33080ns
getShapeQuads min time  = 974ns
getShapeQuads max time  = 1522280ns
[16:43:04] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 8879 ns, total duration = 898, total runs = 101159
Error count = 0
 
getShapeQuads mean time = 33621ns
getShapeQuads min time  = 978ns
getShapeQuads max time  = 1513374ns
[16:43:08] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9022 ns, total duration = 912, total runs = 101159
Error count = 0
 
// double split
getShapeQuads mean time = 32851ns
getShapeQuads min time  = 993ns
getShapeQuads max time  = 1586433ns
[16:44:39] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 8134 ns, total duration = 822, total runs = 101159
Error count = 0
 
getShapeQuads mean time = 32953ns
getShapeQuads min time  = 1017ns
getShapeQuads max time  = 1848920ns
[16:44:43] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 8139 ns, total duration = 823, total runs = 101159
Error count = 0
 
getShapeQuads mean time = 32333ns
getShapeQuads min time  = 997ns
getShapeQuads max time  = 1888894ns
[16:44:47] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 8008 ns, total duration = 810, total runs = 101159
Error count = 0

// with X pre-split of terrain only
[18:12:26] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 95 ns, total duration = 2689, total runs = 28178752
[18:12:26] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 182 ns, total duration = 547, total runs = 3002233

// with no pre-split
[18:14:11] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 120 ns, total duration = 3806, total runs = 31588200
[18:14:11] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 233 ns, total duration = 847, total runs = 3634407

// with X pre-split of both
[18:16:10] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 102 ns, total duration = 3117, total runs = 30273255
[18:16:10] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 201 ns, total duration = 605, total runs = 3002233

// x and + split of terrain
[18:35:52] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 103 ns, total duration = 3343, total runs = 32381760
[18:35:52] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 204 ns, total duration = 615, total runs = 3002233


// x and + split of non-simple terrain
[18:39:26] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 96 ns, total duration = 3061, total runs = 31663944
[18:39:26] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 191 ns, total duration = 560, total runs = 2924570

// x and + split of non-simple terrain, output two sides when non-simple, didn't help as expected
[18:55:25] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 97 ns, total duration = 3160, total runs = 32362127
[18:55:25] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 196 ns, total duration = 581, total runs = 2961629

// x and + split of non-simple terrain, x only if most sides are simple
[19:23:09] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 111 ns, total duration = 3509, total runs = 31353798
[19:23:09] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 228 ns, total duration = 667, total runs = 2924570


// pre-build terrain CSG roots with bottom face added and pre-split depending on complexity level
[21:07:24] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 88 ns, total duration = 2892, total runs = 32784820
[21:07:24] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 185 ns, total duration = 489, total runs = 2640364

// also pre-build cube CSG root with different complexity levels
[21:20:45] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 88 ns, total duration = 2954, total runs = 33366260
[21:20:45] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 207 ns, total duration = 429, total runs = 2072212


// pre-built terrain and cube, only use simple or X split, no X+ pre-split
[21:23:48] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 91 ns, total duration = 2572, total runs = 28169112
[21:23:48] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 203 ns, total duration = 421, total runs = 2072212

// don't pre-split cube - slightly fewer top line but more actual splits
[21:25:53] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 114 ns, total duration = 3104, total runs = 27151419
[21:25:53] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 227 ns, total duration = 601, total runs = 2640364

// always use X split, slightly worse than using no X split when simple
[21:27:19] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 100 ns, total duration = 2892, total runs = 28751261
[21:27:19] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 217 ns, total duration = 455, total runs = 2091672


// after pre-built CSG splits, other stuff
getShapeQuads mean time = 24946ns
getShapeQuads min time  = 882ns
getShapeQuads max time  = 1495636ns
Runs exceeding 60,000ns: 671

// actually recombining polys again
getShapeQuads mean time = 31676ns
getShapeQuads min time  = 877ns
getShapeQuads max time  = 1867005ns
Runs exceeding 60,000ns: 2597
[09:04:13] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 410 ns, total duration = 558, total runs = 1361834
[09:04:13] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination efficiency = 17 percent

// same, with outer loop timing enabled
getShapeQuads mean time = 27414ns
getShapeQuads min time  = 856ns
getShapeQuads max time  = 1326387ns
Runs exceeding 60,000ns: 1176
[09:31:17] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 9504 ns, total duration = 961, total runs = 101159
[09:31:17] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 374 ns, total duration = 509, total runs = 1361834
[09:31:17] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination reduction = 17 percent (of polygons processed, not total reduction)
Error count = 0


// don't create lists for original poly buckets with a single poly, similarly don't call recombine quads for a single quad
getShapeQuads mean time = 25946ns
getShapeQuads min time  = 892ns
getShapeQuads max time  = 1423742ns
Runs exceeding 60,000ns: 912
[09:47:38] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 7988 ns, total duration = 808, total runs = 101159
[09:47:38] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 2001 ns, total duration = 478, total runs = 239292
[09:47:38] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination reduction = 40 percent (of polygons processed, not total reduction)
Error count = 0

// optimize for special case of two polygons
getShapeQuads mean time = 25342ns
getShapeQuads min time  = 916ns
getShapeQuads max time  = 1559874ns
Runs exceeding 60,000ns: 997
[10:16:59] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinedRenderableQuads duration = 6655 ns, total duration = 673, total runs = 101159
[10:16:59] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg recombinePolys duration = 1427 ns, total duration = 341, total runs = 239292
[10:16:59] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly recombination reduction = 40 percent (of polygons processed, not total reduction)
[10:16:59] [main/INFO] [grondag.exotic_matter.ExoticMatter]: CSG Poly pair-wise count = 16 percent (of polygons processed)
Error count = 0

// run with counters off
getShapeQuads mean time = 25097ns
getShapeQuads min time  = 888ns
getShapeQuads max time  = 1395968ns
Runs exceeding 60,000ns: 812
Error count = 0


// re-enabled split timing
getShapeQuads mean time = 46666ns
getShapeQuads min time  = 875ns
getShapeQuads max time  = 1895344ns
Runs exceeding 60,000ns: 32032
[10:35:37] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 81 ns, total duration = 2295, total runs = 28169112
[10:35:37] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 163 ns, total duration = 339, total runs = 2072212


// going back to vertex type vs combined increment in first split pass - didn't help
getShapeQuads mean time = 47679ns
getShapeQuads min time  = 925ns
getShapeQuads max time  = 1414566ns
Runs exceeding 60,000ns: 35532
[10:54:21] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 83 ns, total duration = 2357, total runs = 28169112
[10:54:21] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 186 ns, total duration = 387, total runs = 2072212
Error count = 0

// back to combined increment test - appears to confirm is slightly better
getShapeQuads mean time = 46865ns
getShapeQuads min time  = 885ns
getShapeQuads max time  = 1645325ns
Runs exceeding 60,000ns: 32658
[11:06:51] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitQuad duration = 81 ns, total duration = 2301, total runs = 28169112
[11:06:51] [main/INFO] [grondag.exotic_matter.ExoticMatter]: Avg splitSpanningQuad duration = 162 ns, total duration = 336, total runs = 2072212
Error count = 0

// ideas
use face normal in original poly
don't create new vec3f instance tVec - use local vars instead
optimize compute face normal in concrete poly classes


 Serialize port layout in devices
 Let direct ports mate with direct ports to form device/device private links
 
 Material Handling
 	Bulk Container
 		various sizes (see matter cubes) can contain up to max.
 		Quantity stored is in NBT as nL
 		Stores Forge Liquids, which may be flowable solids
 	
 	Process
 		Can be discrete or continuous
 		Continuous have only bulk input and outputs, all are variable
 		Discrete have specific item inputs and fixed-amount bulk inputs/outputs
 	
 		Inputs
 		ItemConversion (w/ ItemPredicate) -> Bulk Resource
 		FluidConversion -> Bulk Resource
 		ItemPredicate (specific)
 		
 		Outputs
 		BulkResource -> Fluid
 		BulkResource -> Container (if not fluid or fluid transport unavailable)
 		ItemStack
 		 
 	JEI recipes...
 		Do not show bulk resources
 		For each bulk input show example BulkContainer or FluidStack
 		
 	
	FluidBuffer
		For any fluid (gas,liquid or flowable solid) input/or output
		Can input/output from pipes, bulk containers
		In rare cases, (sand) can accept non-bulk item stacks
 		If more than one fluid/item resource can fill a fluid buffer,
 		then a generic fluid must be defined to represent those mixed/generic ingredients.
		
 	ItemBuffer
 		For any input or output that is a discrete item stack
 	

Portable fluid tanks are independent devices
Portable fluid tanks have specific ports/fluids
Portable fluid tanks have carrier ports for their fluid type
Multi-block fluid tanks (later) have shared device instance
Catalytic synthesis blocks have ethylene and ammonia carrier ports

Outputs of CS include graphite, containerized resins, PE resin, other resins, fibers

How does containerized fluid transport work?
	Containers
		are always same size (1M3) - but may not be full
		are fluid-specific
		(future) may require refrigerated storage

	Demand side - input to a buffer
		If have fluid circuit, try it first
		If accept containers, search for containers in item storage
		If container is bigger than buffer, place partial container in item output buffer
		If no containers, post containerizer demand
			If later obtain fluid supply, cancel container demand
		
	Supply side - output from a buffer
		If have fluid circuit, search for available storage on it
		If can output to container, obtain a container and fill it
		Place filled containers in item output buffer
		If output is for a specific job, output container as soon as 
			it reaches the demanded amount.
		If no available containers, post demand for empty container
		
	Containerizers
		Import or export containerized fluid from an attached fluid circuit
		Two optional limits
			Min fill %/# - import containers if storage on local circuit falls below
			Max fill %/# - export containers if storage on local circuit falls below
			
		Parameters
			Accept export requests: will export a container on demand if above min
			
		
	Supply side
		
		If have a fluid circuits, and 

Storage Network

In PacketOpenContainerStorageInteraction.handle, use listener instead of storage
for resource handle cross reference.  TileEntity will need to save a reference
for listeners other than the domain-level listener.

Remove resource handle from resource.

Virtual Blocks

PlacementSpec - list of placements to be applied to the world,
	along with configuration about how they should be applied. 
	
	Simple - spec for a single operation, the item stacks at each position
	may or may not represent the end world state, because of prior world state, 
	filter conditions or subsequent operations.  The spec and its entries
	contain the logic to transform current world (or virtual) block state
	into the specified state.  Persisted as part of a build.
	
	Build - spec that represents the end result of a committed build. The stack
	at each position is determined by capturing state of virtual blocks in the
	build at the time the spec is created.  
	
	Build specs are persisted as part of their build mainly 
	so that identifiers and indexes retained in jobs remain consistent.

Build - collection of virtual blocks being edited in the world, or to be placed
	in the world from a previously saved collection of virtual blocks.  
	
	Only a single build can be active (and thus visible) for each player.  
	
	Players can share an editable build.  
	Sharing a build means all players sharing it can see virtual blocks, 
	make changes, and commit the build.
	 
	Builds can be saved or unloaded or reloaded. 
	
	Builds are domain members and persisted as part of their domain. When a build is committed,
	all construction is managed by the domain of which it is a member. To share a build, a player 
	must be a member of the same domain and have building view/edit rights.  The player 
	can then switch to that domain and select the build as their active build.
	
	Each domain has a default build that is reopened whenever it is committed. By default,
	players use the default build of their active domain. Players in the same domain will
	thus all share the same default build unless they change their active build. 
	
	Builds can be moved to a different location in the world.  Builds can also be copied.
	
	Once submitted for construction, a build cannot be changed.  
	Player can still view it, but clicking on virtual blocks or other operations
	will inform the player the build is in construction and they have to reopen it to make changes.
	
	Builds submitted for construction can be reopened.  This cancels all active construction
	tasks.  The build is NOT changed, meaning that placed blocks are still part of the build
	but they will not render as placements or excavations because world state already matches.  
	
	A completed build can be re-submitted without changes for repair purposes.  
	This will cause the build to be re-applied exactly as before
	and any block state that not match virtual state will be changed.  Note that results can vary
	if excavations were not performed at the start.  For example, if a hollow shell was built without
	excavation the entire region, and the interior happened to be empty at last build time, a rebuild
	will not cause the interior to be excavated because that was never part of the build.
	
Jobs/Tasks
	When a build is committed, it creates a planning task that references the build spec.
	The planning task create excavate, procure/fab and placement
	tasks for each block position. This work is
	executed incrementally on the server thread during world tick.
	If a build is reopened, the entire job is cancelled.
	If in-scope world state changes outside of the job, (detected by virtual state tracker)
	these tasks are cancelled and the planning tasks is updated (if active) or made ready again.

Virtual Block (block)
	A virtual block represents the result of a virtual placement.
	
	All virtual blocks are associated with a build - either a build that is
	being edited or a build that has been placed and then marked with virtual blocks.
	
	A build that is being designed consists exclusively of virtual blocks.  Breaking
	or replacing a virtual block in a build being edited changes the build.
	
	A pre-designed build when placed in the world will only have virtual blocks
	in positions that are not occupied.  Breaking a virtual block in a pre-designed
	build that has been placed has no effect on the build - the block will still be placed.
	
	Virtual blocks are only visible if the player viewing them has selected the build associated
	with the virtual block as their active build.
	
	Placing a virtual block in a space already occupied by a virtual block from another build
	will depend on configuration.  It can either fail, or it will replace the virtual block
	and - if the replaced block was part of an editable build - change the build to which 
	the previous block belonged.
	
Tablet Computer (physical tool)
	Personal computer.  Required for all domain-related access functions and for viewing
	any kind of virtual reality construct, like virtual blocks or virtual tools. Player
	can upgrade to an implant version, which does not require an inventory slot and is accessed
	via a keystroke.
	
Excavation Marker (Virtual tool)
	Crafted using the tablet, marks real-world blocks for removal. Has several selection modes.
	All actions are immediately submitted as jobs.

Exchange Marker (Virtual tool)
	Crafted using the tablet, marks real-world blocks for replacement.  Has several selection modes. 
	All actions are immediately submitted as  jobs.
	
Excavation/Exchange Job (class instance)
	Job containing the excavation/exchange tasks submitted by the excavation/exchange markers. Part of a domain.
	Registers and updates excavation in the excavation render tracker, which handles client
	state. Must re-register with the render tracker on reload, because the tracker does not persist state.
	
Excavation Render Tracker (class)
	Tracks all excavation and exchange jobs in progress and transmits them to clients for rendering.
	Not serialized. Jobs are responsible for maintaining all state in the tracker.
	
Virtual Builder's Wand (Virtual tool)
	Crafted using the tablet, places virtual blocks similar to a builder's wand.  Selection can be
	based on either real-world or virtual blocks in the active build.  Placed blocks are part of
	the active build.

Virtual Cutter (Virtual tool)
	Removes virtual blocks, or parts of them, similar to an excavation marker but only affects
	virtual blocks in the current build.  Crafted using the tablet. Placed blocks are part of
	the active build.

Virtual Block (Virtual tool)
	Places virtual blocks in world, either singly or in multiblock shapes. Highly configurable.
	Crafted using the tablet. Placed blocks are part of the active build.
	Block placement actions are submitted as world tasks if the number of block state changes
	is large so they can be executed incrementally. 

World Task
	(see code)
	
World Task Manager
 	(see code)

Persistence Stuff

In tile entity
	deserializeNBT synonym for readFromNBT, AND ISN"T USED
	serializeNBT calls writeToNBT, ALSO NOT USED
	readFromNBT is called from create() static method
	
	Key takeaway is that support for ReadNBT / WriteNBT isn't going anywhere
	and methods should continue to be synonymous
	
	private tag customTileData is saved with tag "ForgeData" and is accesible
	via getTileData().  Is saved (if non-null) in writeInternal
	
	writeInternal is used by both writeToNBT/serializeNBT and getUpdateTag.  Only diff is that
	getUpdateTag returns a new tag vs writing to the passed in tag.  In both cases,
	there is no additional logic. writeInternal does not filter out anything for clients.
	
	getUpdateTag is used when chunk updates are sent - full or portial. 
	Does not seem useful for sending individual tile updates.
	
	handleUpdateTag is used on client to read in the packet produced by getUpdateTag.
	
	getUpdatePacket is used to send update packets for some vanilla blocks
	but comments in the code for the packet seem to indicate it should only
	be used by vanilla.  Default implementation returns null.
	
	onDataPacket is the client-side handler for the packet from getUpdatePacket()
	
	In summary - places were we need to avoid sending large NBT value to client
	that would break packets include:
		getUpdateTag / handleUpdateTag
		getUpdatePacket / onDataPacket (if used)
		
SuperTileEntity
	
	getUpdatePacket / onDataPacket
	---------------------------------
	implements getUpdatePacket / onDataPacket and sends entire tag
	called when there is a blockUpdate - tracked y PlayerChunkMap
	Note that only uses getUpdatePacket if there is a small number of 
	changes - otherwise seems to handle using getUpdateTag.
	Both use writeToNBT and so currently send full state. 
	
	In general is not efficient and could send overlarge packets if
	TE has a large NBT value. 

	But note also that modelState seldom changes unless the block state also changes,
	so this arrangement is probably fine for SuperBlocks.
	
	getUpdateTag / handleUpdateTag
	---------------------------------
	Works the same way as getUpdatePacket / onDataPacket
	Share the same handling routine on the client side, 
	which updates modelState and refreshes the client render state if different.
	
	readFromNBT / writeToNBT
	---------------------------------
	only addition is use of SuperBlockNBTHelper to read/write modelState.
	could instead make modelState implement IReadWriteNBT
	
	addInformation - change to use deserializers from stack NBT
	
	
	
       // SCENARIO: SEARCH INVENTORY - CLIENT 
//        
//        // on client, will give search a session identifier that is passed back and forth to server to match incoming updates
//        LiveStorageSearch<StorageTypeStack> search = ClientStorageIndexProxy.beginLiveItemSearch("iron");
//        
//        //search must implement List<IResourceStack<>> to be used to display in tab bar
//        TabBar<IResourceStack<StorageTypeStack>> bar = new TabBar(search);
//        
//        
//        search.setSearchString("gold");
//        
//        
//        //server needs to close open session if player is no longer looking at the screen, in case this gets missed
//        // see player.openContainer
//        search.close();
//        
//        
//        // SCENARIO: SEARCH INVENTORY - SERVER
//        
//        // top-level calls will mirror client
//        LiveStorageSearch<StorageTypeStack> search = ServerStorageIndexProxy.beginLiveItemSearch("iron");
//            // called by above
//            StorageIndexProxy.addListenter(search);
//            
//        search.setSearchString("gold");
//        
//        search.close();
//            StorageIndexProxy.removeListenter(search);
//        
//        // assumes stacks can't be negative, called by StorageIndex when it gets updates
//        LiveStorageSearch.notifyOfChange(stack, isRemoved); 
//        
//        // called by individual storages
//        search.notifyOfChange(stack, isRemoved);
//        StorageIndexProxy.register(IStorage);
//        StorageIndexProxy.register(IStorage); // has to be called if goes offline
//        
//        
//        // SCENARIO: DISPLAY MACHINE STATUS - CLIENT 
//        LiveMachineStatus machineStatus = clientMachine.requestLiveStatus();
//        
//        // list resources buffered in the machine: materials, power, fluids, etc.
//        List<IResourceStack<?>> bufferedInputs = machineStatus.bufferedInputs();
//        List<IResourceStack<?>> bufferedOutputs = machineStatus.bufferedOutputs();
//        Job activeJob = machineStatus.activeJob();
//        RequestStatus status = activeJob.getStatus();
//        List<IResourceStack<?>> expectedInputs = activeJob.expectedInputs();
//        List<IResourceStack<?>> expectedOutputs = activeJob.expectedOutputs();
//        List<IResourceStack<?>> actualInputs = activeJob.actualInputs();
//        List<IResourceStack<?>> actualOutputs = activeJob.actualOutputs();
//        
//        
//        // SCENARIO: DISPLAY MACHINE STATUS - SERVER 
//        LiveMachineStatus machineStatus = serverMachine.requestLiveStatus();
//            serverMachine.addListener(machineStatus);
//        
//        // called in server machine on listeners when there is a change
//        machineStatus.checkForUpdates(this);
//        
//        
//        // SCENARIO: AUTOMATED BUILDING
//        
//        // user submits request to build a structure
//        BuildingPlan bPlan = myAdHocBuildTracker.createPlan();
//            List<BlockPlacement> placements = myAdHocBuildTracker.sequenceBlockPlacements();
//            
//            generateTasksForAllPlacements(List<BlockPlacement> placements)
//            {
//                for()
//            }
//            blockPlacement currentNode =
//            bPlan.addTopLevelTasks
//        myRecentBuildPlans.add(bPlan)
//        myAdHocBuildTracker.clear();
//        BuildingJob bJob = BuildingManager.createJob(bPlan);
//        
//                        
//        /**
//          
//          blocks require an queue selection agent"
//           useful when units of work have to pass through multiple processing steps with dependencies
//           that aren't part of the processing.  Block building is a good example.
//           We can make the blocks and load up drones, but blocks have to be placed on other blocks.
//           And the other blocks available to be placed on may change dynamically.
//           
//           Tasks in the queue are selected by the agent based on their ability to be consumed in the end.
//           In this case, agent checks to see if the block can be placed against a block already
//           in the world, or against a block that it has already promoted to a later step of processing.
//           
//           example
//           
//           placed 10 blocks
//           blocks 0-3 can be placed on the ground, or on each other
//           blocks 4-7 must be placed on one of the blocks 0-3, or on each other
//           blocks 8-9 must be placed on 4 and 7
//           
//           processing has three steps: forming, loading (into drone), and placing (moving drone and placing blocks)
//           
//           agent will immediately release blocks 0-3 for forming.
//           As those complete, they move the loading queue and agent will begin to release 4-7 for forming.
//           Drones can pick up as many blocks as they can from the loading queue
//           and then move to build site and start placing them.  Some risk of waiting if drones
//           get delayed or place blocks at different speeds, but probably okay.
//           
//           TaskContainer - container with tasks to be executed
//               scheduler - logic that determines which waiting tasks can be started
//               taskFactory - adapter that prepares inputs for execution by this container
//               limit - max number of items can be in queue before it stops accepting new items
//               inputContainer - container from which to pull work
//               takeCompleteTasks() - take completed work that can be drawn from this container
//               startReadyTask() - find a ready task, mark it started and return it
//               abortStartedTask(task) - return a started task to ready state
//               completeStartedTask(task) - move a started task to completed state
//               addCompletionListener() - will notify listeners when a task is completed
//               addReadyListener() - will notify listeners when a task is ready
//               
//               tasks in a container can be unready, ready, started or complete
//
//               taskContainers that use the same worker type will register
//               with a gobla index service that subscribes to addReadyListener()
//               so that workers can find tasks without querying individual jobs
//               
//               a machine or process that consumes the type of task in the container will try to claim ready tasks
//                   it will mark the task a started and then mark it complete when finished
//               only complete tasks can be taken by a downstream container
//               
//               container has a periodic upkeep loop
//                   if this.count < limit
//                       for input : inputContainer.takeCompletedTasks()
//                       {
//                           this.addTask(taskFactory.createTaskFromInput(input)
//                       }
//                   scheduler.schedule(this)       
//               
//           StartContainer - container with no inputs or scheduler
//               all tasks in a StartContainer have a complete status
//               typically no size limit
//                   
//           FinishContainer - container at the end of a job
//               taskFactory simply discards tasks and increments counters
//               no WIP limit
//               no scheduler
//               pulls completed tasks from upstream containers
//               and monitors job completion progress
//               
//           A construction job would look like this
//           
//           Schedulers
//               site scheduler - readies blocks that can be placed at construction site
//               fab scheduler - readies any blocks that can be placed on blocks that have completed fabrication 
//               load scheduler - readies any blocks that can be placed on blocks that have been loaded by a drone
//               
//           
//           FabricationContainer 
//               has no inputContainer
//               has all of the job's generic blockplacement tasks in unready status
//               compound scheduler (site or fab)
//               listeners: fab scheduler, fabrication manager
//               
//               the fabrication machines will manage their own logistics for building
//               the blocks.  The global fab index service provides a feasibilty and estimation function
//               for use by the construction planner.
//               
//           TransportContainer
//               FabricationContainer is input
//               factory simply creates a transport task to move completed blocks to the drone loading site
//               scheduler readies all jobs with no exclusion
//               tasks are marked complete when they arrive at loading site
//               transport subsystem handles sub-planning, execution and estimation of transport tasks
//               listeners: transport manager
//               
//            LoadContainer
//                TransportContainer is input
//                construction drones complete tasks by picking up blocks
//                compound scheduler: (site or load)
//                listeners: load scheduler, construction drone manager
//                
//            BuildContainer
//                LoadContainer is input
//                drones use this to report completion but manage the placement directly
//                no listeners, only used to report status
//                no scheduler, all tasks begin with started status
//                
//                
//            -----
//            
//            
//            so let's look at the processing subsystems that consume the tasks in each of these containers
//            
//            
//            FabricationManager
//                execute tasks that consume material inputs and process them into material outputs
//                also consumes power, computation and may consume transport resources
//                different FabManager for each type of fabrication (nano-fab, crushing, block forming, etc.)
//                Machines that perform multiple functions can be used by more than one FabricationManager
//                computes a preference score for each machine based on priorities
//                for tasks in queue, or being estimated, generates procurement orders for necessary inputs
//                may cancel or change procurement orders if a better way to fabricate something becomes available
//                when all material inputs are reserved, appended to processing queue (may be different priority buckets)
//                added to queue of machine with highest preference score
//                outputs may remain reserved for next step regardless of storage location
//                
//            ProcessingMachine
//                knows how to do one or more processing types
//                provides estimates of costs and outputs
//                scans queue for job tickets
//                expects ticket to have a reservation for all inputs
//                may maintain a buffer quantity of frequently used resources (power, resin, water, etc.)
//                issues transport requests for reserved material inputs when it can receive them
//                produces outputs, puts in output buffer, notifies caller of completion
//                if outputs are not removed from output buffer before it fills, may redirect them to storage  
//                
//            FabricationTask
//                specific to a fabrication type
//                task parameters (modelState, substance type, for example)
//                execute
//                getInputs 
//                procureInputs - called by FabManager when task is being readied to processing, reserves inputs
//                setInputReservations - called 
//                addListener - so that task can notify queue when inputs have been procured and is ready to process
//                getInputReservations - called by machine when it picks up task and is ready to receive inputs
//                setStatus - called by machine / manager to update status
//                setOututReservation - called by machine when reserved outputs are placed in buffer or storage
//                
//                
//            QUESTION: if an input is not in storage and must be fabricated to complete a fabrication task...
//                who issues the request to fabricate the input? FabManager, FabTask, ProcurmentManager?
//                Has to be Procurement, right? Because FabTask didn't know it wasn't available until
//                it asked the procurement manager for the material.
//                
//            StorageManagerImpl - what is stored and where?
//                issues transport requests to put things in storage - where should it be stored?
//                
//            ProcurementManager - who gets to use what is stored?
//                queues prioritized resource requests and apportions them 
//                reserves stored material for a particular task or purpose
//                relies on inventory manager to know what is stored and where
//                reservations aren't locale/lot specific for same material/itemstack 
//                    as example: machine outputs may not go to next task in job if equivalent outputs are closer
//                issues fabrication requests for materials that aren't available (not in storage or already reserved)
//                          
//         */
//        // user can request job status via mechanism similar to machines, see above
//        
//        
//        // forces work break down and may generate multiple possible plans
//        // removes any plans that have unmeetable external dependencies (inputs or conditions that don't come from a task within the plan)
//        // this includes availability of raw materials, production capacity, drone capacity, etc
//        // Then selects the best available plan according to current strategic stance set by user
//        //  Tradeoffs in stance are by function (building, defense, etc.) and choices are speed, efficiency (cost), quality (may not apply for all)
//        // Then makes best plan the active plan.  Or sets no active plan if there are no feasible plans.
//        // Can be called on a job that is already active.  
//        // Doing so will consider only current resources and incomplete tasks 
//        bJob.plan();
//        
//        
//        /**
//        / sample optimization problems
//         * 
//         * several tasks can be completed on two different machines
//         * for all tasks, one of the machines will be most efficient at task level
//         * if all tasks use the single machine, there will be delay overall
//         * would only accept this delay if efficiency is top priority
//         * 
//         * handle this by deciding at last possible moment
//         * each production task has a single provider queue that will route work dynamically based on priorties
//         * plan WBS only needs to know if the task is *possible* and have an estimate (based on recent history) of production cost
//         * plan will be refined at the task level as work gets done
//         * 
//         * another example, a job needs iron and there are four possible ways to get iron
//         * 1) use existing on-hand
//         * 2) conventional ore mining / processing
//         * 
//         * Above illustrates key point for fungible resources - iron, water, power, etc that may have multiple
//         * different forms (blocks/ingots, tanks/on-demand/containerized,  joules/fuel).
//         * All forms of a fungible resource are treated as a single dependency/task for dependent tasks.  
//         * The actual production method will be dynamically determined and may vary within the same job.
//         * 
//         * Fungible resources are only counted as fungible if a 2-way conversion method exists.
//         * (It may have its own dependencies on machines, power, etc.)
//         * The coversion of the fungible resources will have its own sub-plan that is dynamically managed.
//         * 
//         * Producible resources have at least one automated production method that consumes time, machine capacity and/or other resources.
//         * A non-producible resource has to be obtained by the player. 
//         * If a plan requires non-producible resource not in inventory, the plan is not viable.
//         * 
//         * Reclaimable resources can be broken down into other resources that are ingredients in the reclaimable resource.
//         * The output of reclaimation are never included in plans to avoid introducing cycles.  
//         * Instead, if a reclaimable resource has a minimum stocking unit level and the level in storage
//         * drops below this, the excess will be automatically reclaimed.
//         * 
//         * For example, suppose salt and water make brine, and brine can be converted back to solt and water.
//         * Suppose a process needs both water and brine as inputs.  It will use brine on hand, and it will make
//         * brine if some is needed, but it will not produce water from brine as part of the job.  It will
//         * instead rely on reclamation to reclaim excess brine as a separate management function.
//         * 
//         * If more than one, non-fungible resource can be used to produce something, and one of the resources
//         * is non-producible and has other uses, the planner may consume the producible resource, even if the non-producible resource is on hand.
//         * This should probably be a strategy setting, or an inventory setting for the item itself, like minimum stocking level.
//         * 
			  Late add: do we need Resource Brokers to manage/optimize commodity and convertible resources?

//        */
//        
//         // To plan our construction job, we work backwards:
//          
//         // The construction task requires a drone and a block, both at a certain location.
//         Plan newPlan = new Plan(bJob.jobTask);
//         
//         // ... in plan constructor
//         newPlan.topLevelTask = jobTask;
//         jobTask.planSubtasks();
//         
//         // construction task will generate these subtasks...
//         mySubtasks.add(new DroneTask())
//         
//
//        // determine loosely sequenced production plan for optimal construction
//        
//        // determine resource availability and sub-production plan
//        
//        // submit production requests to queue, with dependences
//        
//        
//        // submit construction requests to queue, with dependencies on production requests
//        // and, if appropriate, other construction requests
	
	